name: "Repo Docs Watch & Update Team"
description: "Multi-agent team that ensures the repo exists (clones if missing into ${BASE_DIR}/${REPO_DIR_NAME}), pulls updates, summarizes changes to summaries/{date}.md, prompts cursor-agent to update docs, and pushes a docs-update branch (including the summary file) for review."

tools:
  - name: "bash"
    id: "bash"
    module: "gnosari.tools.builtin.bash_operations"
    class: "BashOperationsTool"
    args:
      allowed_commands: ["git", "ls", "cat", "echo", "date", "diff", "grep", "sed", "awk", "head", "tail", "mkdir", "cd", "pwd", "cursor-agent", "touch", "rm"]
      base_directory: "${BASE_DIR}"
      unsafe_mode: true

  - name: "file_operations"
    module: "gnosari.tools.builtin.file_operations"
    class: "FileOperationsTool"
    args:
      base_directory: "${BASE_DIR}/${REPO_DIR_NAME}"  # Write summaries inside the repo
      allowed_extensions: null
      max_file_size: 10485760

agents:
  - name: "Manager"
    orchestrator: true
    model: "gpt-4o"
    temperature: 0.2
    reasoning_effort: "medium"
    tools: []
    instructions: |
      You coordinate the workflow:
      - Step 0: Delegate to Watcher; it must ensure the repository exists by cloning it into ${BASE_DIR}/${REPO_DIR_NAME} if missing.
      - Step 1: Watcher detects/pulls updates and returns:
        - changes_found: true/false
        - prev_head: <sha>
        - new_head: <sha>
      - If no changes_found, end with: "No changes found; repository is up to date."
      - Step 2: If changes found, delegate to Summarizer with prev_head and new_head to produce an extremely concise Markdown summary and write it to summaries/{YYYY-MM-DD}.md. It returns summary_file path.
      - Step 3: Delegate to Notifier with summary_file so it can run cursor-agent using the file content.
      - Step 4: Delegate to BranchPusher with prev_head, new_head, and summary_file. It should create a docs-update branch containing any docs/ changes AND include the summary file, then push it to origin for review. It returns branch name and push result.
      - Finally, report: summary_file path, whether cursor-agent ran, and branch push status.
    delegation:
      - agent: "Watcher"
        instructions: "Ensure the repo exists under ${BASE_DIR}/${REPO_DIR_NAME} (clone ${REPO_URL} if missing), then check for updates and pull safely. Return changes_found plus prev_head/new_head."
      - agent: "Summarizer"
        instructions: "Given prev_head and new_head, create an extremely concise Markdown summary and write to summaries/{date}.md. Return the summary file path."
      - agent: "Notifier"
        instructions: "Given summary_file, run cursor-agent with a prompt containing the summary text to request docs updates."
      - agent: "BranchPusher"
        instructions: "Create and push a branch with any docs/ changes and include the summaries/{date}.md file after cursor-agent runs. Use prev_head/new_head for naming/message context."

  - name: "Watcher"
    model: "gpt-4o"
    temperature: 0.2
    reasoning_effort: "low"
    tools: ["bash"]
    instructions: |
      Clone repo if it doesn't exist, then check commits to detect changes.
      
      Variables:
      - REPO_URL: ${REPO_URL}
      - REPO_DIR_NAME: ${REPO_DIR_NAME}
      - BASE_DIR: ${BASE_DIR}
      
      Steps:
      1) Clone repo if missing:
         - If directory ${REPO_DIR_NAME} doesn't exist: git clone ${REPO_URL} ${REPO_DIR_NAME}
      
      2) Get previous commit (HEAD~1):
         - cd ${REPO_DIR_NAME}
         - PREV_HEAD=$(git rev-parse HEAD~1)
      
      3) Get current commit (HEAD):
         - NEW_HEAD=$(git rev-parse HEAD)
      
      4) Check for changes between commits:
         - If PREV_HEAD != NEW_HEAD: changes_found=true
         - If PREV_HEAD == NEW_HEAD: changes_found=false
      
      Return exactly:
      - changes_found: true/false
      - prev_head: <sha>
      - new_head: <sha>

  - name: "Summarizer"
    model: "gpt-4o"
    temperature: 0.2
    reasoning_effort: "medium"
    tools: ["bash", "file_operations"]
    instructions: |
      Input: prev_head and new_head SHAs.
      Goal: Generate an extremely concise Markdown summary and write it to summaries/{YYYY-MM-DD}.md inside the repo.
      Steps:
      1) DATE=$(date +%F)
      2) Collect change details (inside repo):
         - NAME_STATUS=$(cd "${REPO_DIR_NAME}" && git diff --name-status "${prev_head}..${new_head}")
         - COMMITS=$(cd "${REPO_DIR_NAME}" && git rev-list --count "${prev_head}..${new_head}")
         - SUBJECTS=$(cd "${REPO_DIR_NAME}" && git log --pretty=format:"%h %s" "${prev_head}..${new_head}")
         - DIFFMIN=$(cd "${REPO_DIR_NAME}" && git diff --unified=0 --minimal "${prev_head}..${new_head}")
      3) Synthesize ultra-brief content:
         - Title: "Repo update ${DATE} (${prev_head}..${new_head})"
         - Show "${COMMITS} commits"
         - Bullet one-liners per changed file from NAME_STATUS with terse verbs (add/remove/modify/rename).
         - Optional: up to 2 key highlights.
      4) Ensure summaries directory exists: use bash: (cd "${REPO_DIR_NAME}" && mkdir -p summaries)
      5) Write the Markdown to summaries/${DATE}.md using file_operations (base_directory already points to the repo). Overwrite if exists.
      Return: summary_file path "summaries/${DATE}.md"

  - name: "Notifier"
    model: "gpt-4o"
    temperature: 0.2
    reasoning_effort: "low"
    tools: ["bash"]
    instructions: |
      Input: summary_file path (relative to repo).
      Task: Invoke cursor-agent with the summary content included in the -p message.
      Steps:
      1) MSG=$(cd "${REPO_DIR_NAME}" && cat "${summary_file}" | head -c 6000)
      2) Run from ${BASE_DIR}: cursor-agent --force -p "This has changed in the repo recently: ${MSG}. Please update the docs."
      3) Report success or any stderr encountered.

  - name: "BranchPusher"
    model: "gpt-4o"
    temperature: 0.2
    reasoning_effort: "low"
    tools: ["bash"]
    instructions: |
      Input: prev_head, new_head, and summary_file (relative to repo).
      Goal: Create and push a branch that includes any docs/ changes AND the summary file for review.
      Steps (inside repo):
      1) Prepare a unique branch name:
         - DATE=$(date +%Y%m%d-%H%M)
         - SHORT=$(echo "${new_head}" | cut -c1-7)
         - BRANCH="docs-update-${DATE}-${SHORT}"
      2) Stage changes:
         - (cd "${REPO_DIR_NAME}" && git add docs/ 2>/dev/null || true)
         - (cd "${REPO_DIR_NAME}" && git add "${summary_file}" 2>/dev/null || true)
         - If (cd "${REPO_DIR_NAME}" && git diff --cached --quiet); then
             echo "No docs or summary changes to push."; exit 0;
           fi
      3) Ensure Git identity (no-op if set):
         - (cd "${REPO_DIR_NAME}" && git config user.email >/dev/null 2>&1) || (cd "${REPO_DIR_NAME}" && git config user.email "automation@example.com")
         - (cd "${REPO_DIR_NAME}" && git config user.name  >/dev/null 2>&1) || (cd "${REPO_DIR_NAME}" && git config user.name  "Repo Docs Bot")
      4) Create branch, commit, and push:
         - (cd "${REPO_DIR_NAME}" && git checkout -b "${BRANCH}")
         - (cd "${REPO_DIR_NAME}" && git commit -m "docs: update after ${prev_head}..${new_head} on $(date +%F)")
         - (cd "${REPO_DIR_NAME}" && git push -u origin "${BRANCH}")
      5) Return: branch name and push result (success/failure message)
